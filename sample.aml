;  AML
;  Author: Alexander Myasnikov
;  mailto:myasnikov.alexander.s@gmail.com
;  git:https://gitlab.com/amyasnikov/aml
;  version: 0.5



; SYSCALL

(defn !
  (syscall
    (int 100)
    (arg 1)))

(defn +
  (syscall
    (int 200)
    (arg 1)
    (arg 2)))

(defn -
  (syscall
    (int 201)
    (arg 1)
    (arg 2)))

(defn *
  (syscall
    (int 202)
    (arg 1)
    (arg 2)))

(defn /
  (syscall
    (int 203)
    (arg 1)
    (arg 2)))

(defn ==
  (syscall
    (int 204)
    (arg 1)
    (arg 2)))

(defn <
  (syscall
    (int 205)
    (arg 1)
    (arg 2)))

(defn &&
  (syscall
    (int 206)
    (arg 1)
    (arg 2)))

(defn ||
  (syscall
    (int 207)
    (arg 1)
    (arg 2)))



; STD

(defn !=
  (call
    (func !)
    (call
      (func ==)
      (arg 1)
      (arg 2))))

(defn >
  (call
    (func !)
    (call
      (func ||)
      (call
        (func <)
        (arg 1)
        (arg 2))
      (call
        (func ==)
        (arg 1)
        (arg 2)))))



; SAMPLE

(defn square
  (call
    (func *)
    (arg 1)
    (arg 2)))

(defn perimeter
  (call
    (func *)
    (int 2)
    (call
      (func +)
      (arg 1)
      (arg 2))))

(defn product
  (if
    (call
      (func >)
      (arg 1)
      (int 1))
    (call
      (func *)
      (arg 1)
      (call
        (func product)
        (call
          (func -)
          (arg 1)
          (int 1))))
    (int 1)))

(defn test_1
  (call
    (func square)
    (int 3)
    (int 5)))

(defn test_2
  (call
    (func perimeter)
    (int 3)
    (int 5)))

(defn test_3
  (call
    (func product)
    (int 5)))

(defn test_4
  (if
    (int 1)
    (arg 1)
    (arg 1)))

(call
  (func test_3)
  (int 101)
  (int 102)
  (int 103)
  (int 104)
  (int 105))



