input:  resources/sample.aml
output: resources/sample.binary.aml
cmd:    compile
log:    resources/sample.log
wd:     /mnt/code/cpp/aml/resources

********************************************************************************
********** source code
********************************************************************************
;  AML
;  Author: Alexander Myasnikov
;  mailto:myasnikov.alexander.s@gmail.com
;  git:https://gitlab.com/amyasnikov/aml
;  version: 0.6



(#include "standard.aml")



(defn square
  (call
    (func *)
    (arg 1)
    (arg 2)))

(defn perimeter
  (call
    (func *)
    (int 2)
    (call
      (func +)
      (arg 1)
      (arg 2))))

(defn product
  (if
    (call
      (func >)
      (arg 1)
      (int 1))
    (call
      (func *)
      (arg 1)
      (call
        (func product)
        (call
          (func -)
          (arg 1)
          (int 1))))
    (int 1)))

(defn test_1
  (call
    (func square)
    (int 3)
    (int 5)))

(defn test_2
  (call
    (func perimeter)
    (int 3)
    (int 5)))

(defn test_3
  (call
    (func product)
    (int 5)))

(defn test_4
  (if
    (int 1)
    (arg 1)
    (arg 1)))

(call
  (func test_3)
  (int 101)
  (int 102)
  (int 103)
  (int 104)
  (int 105))



********************************************************************************
********** tokens
********************************************************************************
token: 3	9:1:1	 '('
token: 12	9:2:8	 '#include'
token: 18	9:11:14	 '"standard.aml"'
token: 4	9:25:1	 ')'
token: 3	13:1:1	 '('
token: 8	13:2:4	 'defn'
token: 17	13:7:6	 'square'
token: 3	14:3:1	 '('
token: 7	14:4:4	 'call'
token: 3	15:5:1	 '('
token: 10	15:6:4	 'func'
token: 17	15:11:1	 '*'
token: 4	15:12:1	 ')'
token: 3	16:5:1	 '('
token: 5	16:6:3	 'arg'
token: 16	16:10:1	 '1'
token: 4	16:11:1	 ')'
token: 3	17:5:1	 '('
token: 5	17:6:3	 'arg'
token: 16	17:10:1	 '2'
token: 4	17:11:1	 ')'
token: 4	17:12:1	 ')'
token: 4	17:13:1	 ')'
token: 3	19:1:1	 '('
token: 8	19:2:4	 'defn'
token: 17	19:7:9	 'perimeter'
token: 3	20:3:1	 '('
token: 7	20:4:4	 'call'
token: 3	21:5:1	 '('
token: 10	21:6:4	 'func'
token: 17	21:11:1	 '*'
token: 4	21:12:1	 ')'
token: 3	22:5:1	 '('
token: 13	22:6:3	 'int'
token: 16	22:10:1	 '2'
token: 4	22:11:1	 ')'
token: 3	23:5:1	 '('
token: 7	23:6:4	 'call'
token: 3	24:7:1	 '('
token: 10	24:8:4	 'func'
token: 17	24:13:1	 '+'
token: 4	24:14:1	 ')'
token: 3	25:7:1	 '('
token: 5	25:8:3	 'arg'
token: 16	25:12:1	 '1'
token: 4	25:13:1	 ')'
token: 3	26:7:1	 '('
token: 5	26:8:3	 'arg'
token: 16	26:12:1	 '2'
token: 4	26:13:1	 ')'
token: 4	26:14:1	 ')'
token: 4	26:15:1	 ')'
token: 4	26:16:1	 ')'
token: 3	28:1:1	 '('
token: 8	28:2:4	 'defn'
token: 17	28:7:7	 'product'
token: 3	29:3:1	 '('
token: 11	29:4:2	 'if'
token: 3	30:5:1	 '('
token: 7	30:6:4	 'call'
token: 3	31:7:1	 '('
token: 10	31:8:4	 'func'
token: 17	31:13:1	 '>'
token: 4	31:14:1	 ')'
token: 3	32:7:1	 '('
token: 5	32:8:3	 'arg'
token: 16	32:12:1	 '1'
token: 4	32:13:1	 ')'
token: 3	33:7:1	 '('
token: 13	33:8:3	 'int'
token: 16	33:12:1	 '1'
token: 4	33:13:1	 ')'
token: 4	33:14:1	 ')'
token: 3	34:5:1	 '('
token: 7	34:6:4	 'call'
token: 3	35:7:1	 '('
token: 10	35:8:4	 'func'
token: 17	35:13:1	 '*'
token: 4	35:14:1	 ')'
token: 3	36:7:1	 '('
token: 5	36:8:3	 'arg'
token: 16	36:12:1	 '1'
token: 4	36:13:1	 ')'
token: 3	37:7:1	 '('
token: 7	37:8:4	 'call'
token: 3	38:9:1	 '('
token: 10	38:10:4	 'func'
token: 17	38:15:7	 'product'
token: 4	38:22:1	 ')'
token: 3	39:9:1	 '('
token: 7	39:10:4	 'call'
token: 3	40:11:1	 '('
token: 10	40:12:4	 'func'
token: 17	40:17:1	 '-'
token: 4	40:18:1	 ')'
token: 3	41:11:1	 '('
token: 5	41:12:3	 'arg'
token: 16	41:16:1	 '1'
token: 4	41:17:1	 ')'
token: 3	42:11:1	 '('
token: 13	42:12:3	 'int'
token: 16	42:16:1	 '1'
token: 4	42:17:1	 ')'
token: 4	42:18:1	 ')'
token: 4	42:19:1	 ')'
token: 4	42:20:1	 ')'
token: 3	43:5:1	 '('
token: 13	43:6:3	 'int'
token: 16	43:10:1	 '1'
token: 4	43:11:1	 ')'
token: 4	43:12:1	 ')'
token: 4	43:13:1	 ')'
token: 3	45:1:1	 '('
token: 8	45:2:4	 'defn'
token: 17	45:7:6	 'test_1'
token: 3	46:3:1	 '('
token: 7	46:4:4	 'call'
token: 3	47:5:1	 '('
token: 10	47:6:4	 'func'
token: 17	47:11:6	 'square'
token: 4	47:17:1	 ')'
token: 3	48:5:1	 '('
token: 13	48:6:3	 'int'
token: 16	48:10:1	 '3'
token: 4	48:11:1	 ')'
token: 3	49:5:1	 '('
token: 13	49:6:3	 'int'
token: 16	49:10:1	 '5'
token: 4	49:11:1	 ')'
token: 4	49:12:1	 ')'
token: 4	49:13:1	 ')'
token: 3	51:1:1	 '('
token: 8	51:2:4	 'defn'
token: 17	51:7:6	 'test_2'
token: 3	52:3:1	 '('
token: 7	52:4:4	 'call'
token: 3	53:5:1	 '('
token: 10	53:6:4	 'func'
token: 17	53:11:9	 'perimeter'
token: 4	53:20:1	 ')'
token: 3	54:5:1	 '('
token: 13	54:6:3	 'int'
token: 16	54:10:1	 '3'
token: 4	54:11:1	 ')'
token: 3	55:5:1	 '('
token: 13	55:6:3	 'int'
token: 16	55:10:1	 '5'
token: 4	55:11:1	 ')'
token: 4	55:12:1	 ')'
token: 4	55:13:1	 ')'
token: 3	57:1:1	 '('
token: 8	57:2:4	 'defn'
token: 17	57:7:6	 'test_3'
token: 3	58:3:1	 '('
token: 7	58:4:4	 'call'
token: 3	59:5:1	 '('
token: 10	59:6:4	 'func'
token: 17	59:11:7	 'product'
token: 4	59:18:1	 ')'
token: 3	60:5:1	 '('
token: 13	60:6:3	 'int'
token: 16	60:10:1	 '5'
token: 4	60:11:1	 ')'
token: 4	60:12:1	 ')'
token: 4	60:13:1	 ')'
token: 3	62:1:1	 '('
token: 8	62:2:4	 'defn'
token: 17	62:7:6	 'test_4'
token: 3	63:3:1	 '('
token: 11	63:4:2	 'if'
token: 3	64:5:1	 '('
token: 13	64:6:3	 'int'
token: 16	64:10:1	 '1'
token: 4	64:11:1	 ')'
token: 3	65:5:1	 '('
token: 5	65:6:3	 'arg'
token: 16	65:10:1	 '1'
token: 4	65:11:1	 ')'
token: 3	66:5:1	 '('
token: 5	66:6:3	 'arg'
token: 16	66:10:1	 '1'
token: 4	66:11:1	 ')'
token: 4	66:12:1	 ')'
token: 4	66:13:1	 ')'
token: 3	68:1:1	 '('
token: 7	68:2:4	 'call'
token: 3	69:3:1	 '('
token: 10	69:4:4	 'func'
token: 17	69:9:6	 'test_3'
token: 4	69:15:1	 ')'
token: 3	70:3:1	 '('
token: 13	70:4:3	 'int'
token: 16	70:8:3	 '101'
token: 4	70:11:1	 ')'
token: 3	71:3:1	 '('
token: 13	71:4:3	 'int'
token: 16	71:8:3	 '102'
token: 4	71:11:1	 ')'
token: 3	72:3:1	 '('
token: 13	72:4:3	 'int'
token: 16	72:8:3	 '103'
token: 4	72:11:1	 ')'
token: 3	73:3:1	 '('
token: 13	73:4:3	 'int'
token: 16	73:8:3	 '104'
token: 4	73:11:1	 ')'
token: 3	74:3:1	 '('
token: 13	74:4:3	 'int'
token: 16	74:8:3	 '105'
token: 4	74:11:1	 ')'
token: 4	74:12:1	 ')'

********************************************************************************
********** lisp_tree
********************************************************************************
((#include
  "standard.aml")
(defn
  square
  (call
    (func
      *)
    (arg
      1)
    (arg
      2)))
(defn
  perimeter
  (call
    (func
      *)
    (int
      2)
    (call
      (func
        +)
      (arg
        1)
      (arg
        2))))
(defn
  product
  (if
    (call
      (func
        >)
      (arg
        1)
      (int
        1))
    (call
      (func
        *)
      (arg
        1)
      (call
        (func
          product)
        (call
          (func
            -)
          (arg
            1)
          (int
            1))))
    (int
      1)))
(defn
  test_1
  (call
    (func
      square)
    (int
      3)
    (int
      5)))
(defn
  test_2
  (call
    (func
      perimeter)
    (int
      3)
    (int
      5)))
(defn
  test_3
  (call
    (func
      product)
    (int
      5)))
(defn
  test_4
  (if
    (int
      1)
    (arg
      1)
    (arg
      1)))
(call
  (func
    test_3)
  (int
    101)
  (int
    102)
  (int
    103)
  (int
    104)
  (int
    105)))
********************************************************************************
********** stmt
********************************************************************************
(defn +
  (syscall
    (int 200)
    (arg 1)
    (arg 2)))

(defn -
  (syscall
    (int 201)
    (arg 1)
    (arg 2)))

(defn *
  (syscall
    (int 202)
    (arg 1)
    (arg 2)))

(defn /
  (syscall
    (int 203)
    (arg 1)
    (arg 2)))

(defn !
  (syscall
    (int 100)
    (arg 1)))

(defn &&
  (syscall
    (int 206)
    (arg 1)
    (arg 2)))

(defn ||
  (syscall
    (int 207)
    (arg 1)
    (arg 2)))

(defn ==
  (syscall
    (int 204)
    (arg 1)
    (arg 2)))

(defn <
  (syscall
    (int 205)
    (arg 1)
    (arg 2)))

(defn !=
  (call
    (func !)
    (call
      (func ==)
      (arg 1)
      (arg 2))))

(defn >
  (call
    (func !)
    (call
      (func ||)
      (call
        (func <)
        (arg 1)
        (arg 2))
      (call
        (func ==)
        (arg 1)
        (arg 2)))))

(defn square_tmp
  (call
    (func *)
    (arg 1)
    (arg 2)))

(defn square
  (call
    (func *)
    (arg 1)
    (arg 2)))

(defn perimeter
  (call
    (func *)
    (int 2)
    (call
      (func +)
      (arg 1)
      (arg 2))))

(defn product
  (if
    (call
      (func >)
      (arg 1)
      (int 1))
    (call
      (func *)
      (arg 1)
      (call
        (func product)
        (call
          (func -)
          (arg 1)
          (int 1))))
    (int 1)))

(defn test_1
  (call
    (func square)
    (int 3)
    (int 5)))

(defn test_2
  (call
    (func perimeter)
    (int 3)
    (int 5)))

(defn test_3
  (call
    (func product)
    (int 5)))

(defn test_4
  (if
    (int 1)
    (arg 1)
    (arg 1)))

(call
  (func test_3)
  (int 101)
  (int 102)
  (int 103)
  (int 104)
  (int 105))


********************************************************************************
********** intermediate code
********************************************************************************
0		arg 5
9		arg 5
18		push8 200
27		push8 3
36		syscall
37		ret
38		arg 5
47		arg 5
56		push8 201
65		push8 3
74		syscall
75		ret
76		arg 5
85		arg 5
94		push8 202
103		push8 3
112		syscall
113		ret
114		arg 5
123		arg 5
132		push8 203
141		push8 3
150		syscall
151		ret
152		arg 4
161		push8 100
170		push8 2
179		syscall
180		ret
181		arg 5
190		arg 5
199		push8 206
208		push8 3
217		syscall
218		ret
219		arg 5
228		arg 5
237		push8 207
246		push8 3
255		syscall
256		ret
257		arg 5
266		arg 5
275		push8 204
284		push8 3
293		syscall
294		ret
295		arg 5
304		arg 5
313		push8 205
322		push8 3
331		syscall
332		ret
333		push8 152
342		push8 257
351		arg 7
360		arg 7
369		push8 3
378		call
379		push8 2
388		call
389		ret
390		push8 152
399		push8 219
408		push8 257
417		arg 8
426		arg 8
435		push8 3
444		call
445		push8 295
454		arg 9
463		arg 9
472		push8 3
481		call
482		push8 3
491		call
492		push8 2
501		call
502		ret
503		push8 76
512		arg 6
521		arg 6
530		push8 3
539		call
540		ret
541		push8 76
550		arg 6
559		arg 6
568		push8 3
577		call
578		ret
579		push8 76
588		push8 0
597		arg 7
606		arg 7
615		push8 3
624		call
625		push8 2
634		push8 3
643		call
644		ret
645		push8 390
654		push8 1
663		arg 6
672		push8 3
681		call
682		pop_jif 784
691		push8 76
700		push8 645
709		push8 38
718		push8 1
727		arg 8
736		push8 3
745		call
746		push8 2
755		call
756		arg 6
765		push8 3
774		call
775		jmp 793
784		push8 1
793		ret
794		push8 541
803		push8 5
812		push8 3
821		push8 3
830		call
831		ret
832		push8 579
841		push8 5
850		push8 3
859		push8 3
868		call
869		ret
870		push8 645
879		push8 5
888		push8 2
897		call
898		ret
899		push8 1
908		pop_jif 935
917		arg 4
926		jmp 944
935		arg 4
944		ret
945		push8 870
954		push8 105
963		push8 104
972		push8 103
981		push8 102
990		push8 101
999		push8 6
1008		call
1009		exit

