input:  resources/sample.aml
output: resources/sample.binary.aml
cmd:    compile
log:    resources/sample.log
wd:     /mnt/code/cpp/aml/resources

********************************************************************************
********** source code
********************************************************************************
;  AML
;  Author: Alexander Myasnikov
;  mailto:myasnikov.alexander.s@gmail.com
;  git:https://gitlab.com/amyasnikov/aml
;  version: 0.6



(#include "standard.aml")



(defn square
  (call
    (func *)
    (arg 1)
    (arg 2)))

(defn perimeter
  (call
    (func *)
    (int 2)
    (call
      (func +)
      (arg 1)
      (arg 2))))

(defn product
  (if
    (call
      (func >)
      (arg 1)
      (int 1))
    (call
      (func *)
      (arg 1)
      (call
        (func product)
        (call
          (func -)
          (arg 1)
          (int 1))))
    (int 1)))

(defn test_1
  (call
    (func square)
    (int 3)
    (int 5)))

(defn test_2
  (call
    (func perimeter)
    (int 3)
    (int 5)))

(defn test_3
  (call
    (func product)
    (int 5)))

(defn test_4
  (if
    (int 1)
    (arg 1)
    (arg 1)))

(call
  (func test_3)
  (int 101)
  (int 102)
  (int 103)
  (int 104)
  (int 105))



********************************************************************************
********** tokens
********************************************************************************
token: 3	9:1:1	 '('
token: 12	9:2:8	 '#include'
token: 18	9:11:14	 '"standard.aml"'
token: 4	9:25:1	 ')'
token: 3	13:1:1	 '('
token: 8	13:2:4	 'defn'
token: 17	13:7:6	 'square'
token: 3	14:3:1	 '('
token: 7	14:4:4	 'call'
token: 3	15:5:1	 '('
token: 10	15:6:4	 'func'
token: 17	15:11:1	 '*'
token: 4	15:12:1	 ')'
token: 3	16:5:1	 '('
token: 5	16:6:3	 'arg'
token: 16	16:10:1	 '1'
token: 4	16:11:1	 ')'
token: 3	17:5:1	 '('
token: 5	17:6:3	 'arg'
token: 16	17:10:1	 '2'
token: 4	17:11:1	 ')'
token: 4	17:12:1	 ')'
token: 4	17:13:1	 ')'
token: 3	19:1:1	 '('
token: 8	19:2:4	 'defn'
token: 17	19:7:9	 'perimeter'
token: 3	20:3:1	 '('
token: 7	20:4:4	 'call'
token: 3	21:5:1	 '('
token: 10	21:6:4	 'func'
token: 17	21:11:1	 '*'
token: 4	21:12:1	 ')'
token: 3	22:5:1	 '('
token: 13	22:6:3	 'int'
token: 16	22:10:1	 '2'
token: 4	22:11:1	 ')'
token: 3	23:5:1	 '('
token: 7	23:6:4	 'call'
token: 3	24:7:1	 '('
token: 10	24:8:4	 'func'
token: 17	24:13:1	 '+'
token: 4	24:14:1	 ')'
token: 3	25:7:1	 '('
token: 5	25:8:3	 'arg'
token: 16	25:12:1	 '1'
token: 4	25:13:1	 ')'
token: 3	26:7:1	 '('
token: 5	26:8:3	 'arg'
token: 16	26:12:1	 '2'
token: 4	26:13:1	 ')'
token: 4	26:14:1	 ')'
token: 4	26:15:1	 ')'
token: 4	26:16:1	 ')'
token: 3	28:1:1	 '('
token: 8	28:2:4	 'defn'
token: 17	28:7:7	 'product'
token: 3	29:3:1	 '('
token: 11	29:4:2	 'if'
token: 3	30:5:1	 '('
token: 7	30:6:4	 'call'
token: 3	31:7:1	 '('
token: 10	31:8:4	 'func'
token: 17	31:13:1	 '>'
token: 4	31:14:1	 ')'
token: 3	32:7:1	 '('
token: 5	32:8:3	 'arg'
token: 16	32:12:1	 '1'
token: 4	32:13:1	 ')'
token: 3	33:7:1	 '('
token: 13	33:8:3	 'int'
token: 16	33:12:1	 '1'
token: 4	33:13:1	 ')'
token: 4	33:14:1	 ')'
token: 3	34:5:1	 '('
token: 7	34:6:4	 'call'
token: 3	35:7:1	 '('
token: 10	35:8:4	 'func'
token: 17	35:13:1	 '*'
token: 4	35:14:1	 ')'
token: 3	36:7:1	 '('
token: 5	36:8:3	 'arg'
token: 16	36:12:1	 '1'
token: 4	36:13:1	 ')'
token: 3	37:7:1	 '('
token: 7	37:8:4	 'call'
token: 3	38:9:1	 '('
token: 10	38:10:4	 'func'
token: 17	38:15:7	 'product'
token: 4	38:22:1	 ')'
token: 3	39:9:1	 '('
token: 7	39:10:4	 'call'
token: 3	40:11:1	 '('
token: 10	40:12:4	 'func'
token: 17	40:17:1	 '-'
token: 4	40:18:1	 ')'
token: 3	41:11:1	 '('
token: 5	41:12:3	 'arg'
token: 16	41:16:1	 '1'
token: 4	41:17:1	 ')'
token: 3	42:11:1	 '('
token: 13	42:12:3	 'int'
token: 16	42:16:1	 '1'
token: 4	42:17:1	 ')'
token: 4	42:18:1	 ')'
token: 4	42:19:1	 ')'
token: 4	42:20:1	 ')'
token: 3	43:5:1	 '('
token: 13	43:6:3	 'int'
token: 16	43:10:1	 '1'
token: 4	43:11:1	 ')'
token: 4	43:12:1	 ')'
token: 4	43:13:1	 ')'
token: 3	45:1:1	 '('
token: 8	45:2:4	 'defn'
token: 17	45:7:6	 'test_1'
token: 3	46:3:1	 '('
token: 7	46:4:4	 'call'
token: 3	47:5:1	 '('
token: 10	47:6:4	 'func'
token: 17	47:11:6	 'square'
token: 4	47:17:1	 ')'
token: 3	48:5:1	 '('
token: 13	48:6:3	 'int'
token: 16	48:10:1	 '3'
token: 4	48:11:1	 ')'
token: 3	49:5:1	 '('
token: 13	49:6:3	 'int'
token: 16	49:10:1	 '5'
token: 4	49:11:1	 ')'
token: 4	49:12:1	 ')'
token: 4	49:13:1	 ')'
token: 3	51:1:1	 '('
token: 8	51:2:4	 'defn'
token: 17	51:7:6	 'test_2'
token: 3	52:3:1	 '('
token: 7	52:4:4	 'call'
token: 3	53:5:1	 '('
token: 10	53:6:4	 'func'
token: 17	53:11:9	 'perimeter'
token: 4	53:20:1	 ')'
token: 3	54:5:1	 '('
token: 13	54:6:3	 'int'
token: 16	54:10:1	 '3'
token: 4	54:11:1	 ')'
token: 3	55:5:1	 '('
token: 13	55:6:3	 'int'
token: 16	55:10:1	 '5'
token: 4	55:11:1	 ')'
token: 4	55:12:1	 ')'
token: 4	55:13:1	 ')'
token: 3	57:1:1	 '('
token: 8	57:2:4	 'defn'
token: 17	57:7:6	 'test_3'
token: 3	58:3:1	 '('
token: 7	58:4:4	 'call'
token: 3	59:5:1	 '('
token: 10	59:6:4	 'func'
token: 17	59:11:7	 'product'
token: 4	59:18:1	 ')'
token: 3	60:5:1	 '('
token: 13	60:6:3	 'int'
token: 16	60:10:1	 '5'
token: 4	60:11:1	 ')'
token: 4	60:12:1	 ')'
token: 4	60:13:1	 ')'
token: 3	62:1:1	 '('
token: 8	62:2:4	 'defn'
token: 17	62:7:6	 'test_4'
token: 3	63:3:1	 '('
token: 11	63:4:2	 'if'
token: 3	64:5:1	 '('
token: 13	64:6:3	 'int'
token: 16	64:10:1	 '1'
token: 4	64:11:1	 ')'
token: 3	65:5:1	 '('
token: 5	65:6:3	 'arg'
token: 16	65:10:1	 '1'
token: 4	65:11:1	 ')'
token: 3	66:5:1	 '('
token: 5	66:6:3	 'arg'
token: 16	66:10:1	 '1'
token: 4	66:11:1	 ')'
token: 4	66:12:1	 ')'
token: 4	66:13:1	 ')'
token: 3	68:1:1	 '('
token: 7	68:2:4	 'call'
token: 3	69:3:1	 '('
token: 10	69:4:4	 'func'
token: 17	69:9:6	 'test_3'
token: 4	69:15:1	 ')'
token: 3	70:3:1	 '('
token: 13	70:4:3	 'int'
token: 16	70:8:3	 '101'
token: 4	70:11:1	 ')'
token: 3	71:3:1	 '('
token: 13	71:4:3	 'int'
token: 16	71:8:3	 '102'
token: 4	71:11:1	 ')'
token: 3	72:3:1	 '('
token: 13	72:4:3	 'int'
token: 16	72:8:3	 '103'
token: 4	72:11:1	 ')'
token: 3	73:3:1	 '('
token: 13	73:4:3	 'int'
token: 16	73:8:3	 '104'
token: 4	73:11:1	 ')'
token: 3	74:3:1	 '('
token: 13	74:4:3	 'int'
token: 16	74:8:3	 '105'
token: 4	74:11:1	 ')'
token: 4	74:12:1	 ')'

********************************************************************************
********** lisp_tree
********************************************************************************
((#include
  "standard.aml")
(defn
  square
  (call
    (func
      *)
    (arg
      1)
    (arg
      2)))
(defn
  perimeter
  (call
    (func
      *)
    (int
      2)
    (call
      (func
        +)
      (arg
        1)
      (arg
        2))))
(defn
  product
  (if
    (call
      (func
        >)
      (arg
        1)
      (int
        1))
    (call
      (func
        *)
      (arg
        1)
      (call
        (func
          product)
        (call
          (func
            -)
          (arg
            1)
          (int
            1))))
    (int
      1)))
(defn
  test_1
  (call
    (func
      square)
    (int
      3)
    (int
      5)))
(defn
  test_2
  (call
    (func
      perimeter)
    (int
      3)
    (int
      5)))
(defn
  test_3
  (call
    (func
      product)
    (int
      5)))
(defn
  test_4
  (if
    (int
      1)
    (arg
      1)
    (arg
      1)))
(call
  (func
    test_3)
  (int
    101)
  (int
    102)
  (int
    103)
  (int
    104)
  (int
    105)))
********************************************************************************
********** stmt
********************************************************************************
(defn +
  (syscall
    (int 200)
    (arg 1)
    (arg 2)))

(defn -
  (syscall
    (int 201)
    (arg 1)
    (arg 2)))

(defn *
  (syscall
    (int 202)
    (arg 1)
    (arg 2)))

(defn /
  (syscall
    (int 203)
    (arg 1)
    (arg 2)))

(defn !
  (syscall
    (int 100)
    (arg 1)))

(defn &&
  (syscall
    (int 206)
    (arg 1)
    (arg 2)))

(defn ||
  (syscall
    (int 207)
    (arg 1)
    (arg 2)))

(defn ==
  (syscall
    (int 204)
    (arg 1)
    (arg 2)))

(defn <
  (syscall
    (int 205)
    (arg 1)
    (arg 2)))

(defn !=
  (call
    (func !)
    (call
      (func ==)
      (arg 1)
      (arg 2))))

(defn >
  (call
    (func !)
    (call
      (func ||)
      (call
        (func <)
        (arg 1)
        (arg 2))
      (call
        (func ==)
        (arg 1)
        (arg 2)))))

(defn square_tmp
  (call
    (func *)
    (arg 1)
    (arg 2)))

(defn square
  (call
    (func *)
    (arg 1)
    (arg 2)))

(defn perimeter
  (call
    (func *)
    (int 2)
    (call
      (func +)
      (arg 1)
      (arg 2))))

(defn product
  (if
    (call
      (func >)
      (arg 1)
      (int 1))
    (call
      (func *)
      (arg 1)
      (call
        (func product)
        (call
          (func -)
          (arg 1)
          (int 1))))
    (int 1)))

(defn test_1
  (call
    (func square)
    (int 3)
    (int 5)))

(defn test_2
  (call
    (func perimeter)
    (int 3)
    (int 5)))

(defn test_3
  (call
    (func product)
    (int 5)))

(defn test_4
  (if
    (int 1)
    (arg 1)
    (arg 1)))

(call
  (func test_3)
  (int 101)
  (int 102)
  (int 103)
  (int 104)
  (int 105))


********************************************************************************
********** intermediate code
********************************************************************************
0		arg_1b		5
2		arg_1b		5
4		push_2b		200
7		push_1b		3
9		syscall
10		ret
11		arg_1b		5
13		arg_1b		5
15		push_2b		201
18		push_1b		3
20		syscall
21		ret
22		arg_1b		5
24		arg_1b		5
26		push_2b		202
29		push_1b		3
31		syscall
32		ret
33		arg_1b		5
35		arg_1b		5
37		push_2b		203
40		push_1b		3
42		syscall
43		ret
44		arg_1b		4
46		push_1b		100
48		push_1b		2
50		syscall
51		ret
52		arg_1b		5
54		arg_1b		5
56		push_2b		206
59		push_1b		3
61		syscall
62		ret
63		arg_1b		5
65		arg_1b		5
67		push_2b		207
70		push_1b		3
72		syscall
73		ret
74		arg_1b		5
76		arg_1b		5
78		push_2b		204
81		push_1b		3
83		syscall
84		ret
85		arg_1b		5
87		arg_1b		5
89		push_2b		205
92		push_1b		3
94		syscall
95		ret
96		push_1b		44
98		push_1b		74
100		arg_1b		7
102		arg_1b		7
104		push_1b		3
106		call
107		push_1b		2
109		call
110		ret
111		push_1b		44
113		push_1b		63
115		push_1b		74
117		arg_1b		8
119		arg_1b		8
121		push_1b		3
123		call
124		push_1b		85
126		arg_1b		9
128		arg_1b		9
130		push_1b		3
132		call
133		push_1b		3
135		call
136		push_1b		2
138		call
139		ret
140		push_1b		22
142		arg_1b		6
144		arg_1b		6
146		push_1b		3
148		call
149		ret
150		push_1b		22
152		arg_1b		6
154		arg_1b		6
156		push_1b		3
158		call
159		ret
160		push_1b		22
162		push_1b		0
164		arg_1b		7
166		arg_1b		7
168		push_1b		3
170		call
171		push_1b		2
173		push_1b		3
175		call
176		ret
177		push_1b		111
179		push_1b		1
181		arg_1b		6
183		push_1b		3
185		call
186		pop_jif		113
195		push_1b		22
197		push_2b		177
200		push_1b		11
202		push_1b		1
204		arg_1b		8
206		push_1b		3
208		call
209		push_1b		2
211		call
212		arg_1b		6
214		push_1b		3
216		call
217		jmp		114
226		push_1b		1
228		ret
229		push_2b		150
232		push_1b		5
234		push_1b		3
236		push_1b		3
238		call
239		ret
240		push_2b		160
243		push_1b		5
245		push_1b		3
247		push_1b		3
249		call
250		ret
251		push_2b		177
254		push_1b		5
256		push_1b		2
258		call
259		ret
260		push_1b		1
262		pop_jif		141
271		arg_1b		4
273		jmp		142
282		arg_1b		4
284		ret
285		push_2b		251
288		push_1b		105
290		push_1b		104
292		push_1b		103
294		push_1b		102
296		push_1b		101
298		push_1b		6
300		call
301		exit

